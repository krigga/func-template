#include "stdlib.fc";

const int op::ping = 0x50494e47; ;; PING in ascii
const int op::pong = 0x504f4e47; ;; PONG in ascii

const int op::topup = "op::topup"c;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    if (in_msg_body.slice_bits() < 32) { ;; ignore messages with insufficient data
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (op == op::topup) { ;; accept topup coins
        return ();
    }

    if (op == op::ping) {
        slice sender = cs~load_msg_addr();

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(
                begin_cell()
                    .store_uint(op::pong, 32)
                    .store_slice(in_msg_body)
                    .end_cell()
            )
            .end_cell(), 64);

        return ();
    }

    throw(0xffff); ;; unknown op
}

(int) id() method_id {
    var ds = get_data().begin_parse();
    return ds~load_uint(32);
}