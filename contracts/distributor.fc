#include "stdlib.fc";

;;
;; Distributor contract splits any incoming value between shareholders
;;

const op::update_data = "op::update_data"c;
const op::update_code = "op::update_code"c;
const op::topup = "op::topup"c;

global slice ctx_owner;
global int ctx_processing_price;
global cell ctx_shares;
global int ctx_seed;

() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_owner = ds~load_msg_addr();
    ctx_processing_price = ds~load_coins();
    ctx_shares = ds~load_ref();
    ctx_seed = ds~load_uint(16);

    ds.end_parse();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_addr = cs~load_msg_addr();

    load_data();

    ;; Admin methods
    if (equal_slice_bits(sender_addr, ctx_owner) & (~ in_msg_body.slice_empty?())) {
        int op = in_msg_body~load_uint(32);

        if (op == op::update_data) {
            set_data(in_msg_body~load_ref());
        }
        if (op == op::update_code) {
            set_code(in_msg_body~load_ref());
        }
        if (op == op::topup) {
            ;; Just accept coins
            return();
        }
        return();
    }


    msg_value = my_balance - ctx_processing_price;
;;     ;; if there is too much coins left on contract -> we split them between shares
;;     if ((my_balance - msg_value) > ctx_processing_price) {
;;         msg_value =
;;     }

    if (msg_value <= 0) {
        return ();
    }

    int i = -1;
    do {
        (i, slice share, int notfail) = ctx_shares.udict_get_next?(32, i);
        if (notfail) {
            var address = share~load_msg_addr();
            var factor = share~load_uint(16);
            var base = share~load_uint(16);
            var comment = share~load_ref();

            var share_value = muldiv(msg_value, factor, base);

            var msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(address)
                .store_coins(share_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice(comment.begin_parse())
                .end_cell();

            send_raw_message(msg, 0);
        }
    } until (~ notfail);
}

(int) processing_price() method_id {
    load_data();
    return ctx_processing_price;
}